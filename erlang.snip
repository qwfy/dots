snippet gen_server
options head
    -module(${1}).

    -behaviour(gen_server).

    -export([start_link/0]).

    -export([init/1, terminate/2, code_change/3,
             handle_call/3, handle_cast/2, handle_info/2]).


    start_link() ->
        gen_server:start_link({local, ?MODULE}, ?MODULE, {}, []).


    init({}) ->
        {ok, some_state}.


    handle_call(Request, _From, State) ->
        error_logger:warning_report([{unhandled_call, Request}]),
        {noreply, State}.


    handle_cast(Request, State) ->
        error_logger:warning_report([{unhandled_cast, Request}]),
        {noreply, State}.


    handle_info(Info, State) ->
        error_logger:warning_report([{unhandled_info, Info}]),
        {noreply, State}.


    terminate(_Reason, _State) ->
        ignore.


    code_change(_OldVsn, State, _Extra) ->
        {ok, State}.


snippet gen_fsm
options head
    -module(${1}).

    -behaviour(gen_fsm).

    -export([init/1,
             handle_event/3,
             handle_sync_event/4,
             handle_info/3,
             terminate/3,
             code_change/4]).


    init(Args) ->
        {ok, StateName, StateData}.


    StateName(Event, StateData) ->
        {next_state, NextStateName, NewStateData}.


    handle_event(Event, StateName, StateData) ->
        {next_state, NextStateName, NewStateData}.


    StateName(Event, From, StateData) ->
        {next_state, NextStateName, NewStateData}.


    handle_sync_event(Event, From, StateName, StateData) ->
        {reply, Reply, NextStateName, NewStateData}.


    handle_info(Info, StateName, StateData) ->
        {next_state, NextStateName, NewStateData}.


    terminate(_Reason, _StateName, _StateData) ->
        ok.


    code_change(OldVsn, StateName, StateData, Extra) ->
        {ok, NextStateName, NewStateData}.


snippet supervisor
options head
    -module(${1}_sup).

    -behaviour(supervisor).

    -export([init/1]).

    -export([start_link/0]).

    start_link() ->
        supervisor:start_link({local, ?MODULE}, ?MODULE, []).

    init([]) ->
        SupFlags = #{strategy  => one_for_all | one_for_one | rest_for_one | simple_one_for_one,
                     intensity => integer() >= 0,
                     period    => integer() >= 1}, %% unit: second
        ChildSpecs = [#{id       => child_id(),
                        start    => mfargs(),
                        restart  => permanent | transient | temporary
                        shutdown => brutal_kill | timeout() %% unit: 1/1000 second
                        type     => worker | supervisor
                        modules  => modules()}],
        {ok, {SupFlags, ChildSpecs}}.


snippet application
options head
    -module(${1}_app).

    -behaviour(application).

    -export([start/2, stop/1]).

    start(_StartType, _StartArgs) ->
        {ok, SupPid} = ${2}_sup:start_link(),
        {ok, SupPid}.

    stop(_State) ->
        ignore.


snippet -record
options head
    -record(${1}, {}).

snippet -include
options head
    -include("${1}.hrl").

snippet ioformat0
  io:format("${1}~n"),

snippet ioformat
  io:format("${1}~p~n", []),

snippet case
    case ${1} of
    end,

snippet iftrue
    if ${1} ->
       true ->
    end,

snippet fun
    fun(${1}) ->
    end,

snippet funend
    fun(${1}) -> ${2} end,

snippet filter
    lists:filter(fun() ->
                 end, ${1}),

snippet map
    lists:map(fun() ->
              end, ${1}),

snippet filtermap
    lists:filtermap(fun() ->
                    end, ${1}),
snippet foreach
    lists:foreach(fun() ->
                  end, ${1}),

snippet foldl
    lists:foldl(fun() ->
                end, , ${1}),

snippet foldr
    lists:foldr(fun() ->
                end, , ${1}),

snippet comprehension
    [ || <- ${1}],

snippet qlc
    {atomic, } = mnesia:transaction(fun() -> qlc:e(qlc:q([ || <- mnesia:table(${1})])) end)

snippet gencall
    gen_server:call(${1})

snippet gencast
    gen_server:cast(${1})

snippet handle_call
options head
    handle_call({${1}}, _From, State) ->
    {reply, Reply, NewState};

snippet handle_cast
options head
    handle_cast({${1}}, _From, State) ->
    {noreply, NewState};

snippet handle_info
options head
    handle_info(${1}, State) ->
    {noreply, NewState};
