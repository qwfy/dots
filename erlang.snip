snippet gen_server
options head
    -behaviour(gen_server).

    %% Gen server callbacks
    -export([init/1,
             handle_call/3, handle_cast/2, handle_info/2,
             terminate/2,
             code_change/3]).


    %% ====================================

    -type state() :: map().

    -spec init(Args :: term())
          -> {ok, State :: state()}
           | {ok, State :: state(), timeout()}
           | {ok, State :: state(), hibernate}
           | {stop, Reason :: term()}
           | ignore.

    init(${1}) ->
        {ok, #{}}.


    -spec handle_call(Request :: term(), From :: {pid(), Tag :: term()}, State :: state())
          -> {reply, Reply :: term(), NewState :: state()}
           | {reply, Reply :: term(), NewState :: state(), timeout()}
           | {reply, Reply :: term(), NewState :: state(), hibernate}
           | {noreply, NewState :: state()}
           | {noreply, NewState :: state(), timeout()}
           | {noreply, NewState :: state(), hibernate}
           | {stop, Reason :: term(), Reply, NewState :: state()}
           | {stop, Reason :: term(), NewState :: state()}.

    handle_call(Request, From, State) ->
        error_logger:warning_report([{unhandled_call, Request},
                                     {from, From}]),
        {reply, '$REPLY_CONTENT', State}.


    -spec handle_cast(Request :: term(), State :: state())
          -> {noreply, NewState :: state()}
           | {noreply, NewState :: state(), timeout()}
           | {noreply, NewState :: state(), hibernate}
           | {stop, Reason :: term(), NewState :: state()}.

    handle_cast(Request, State) ->
        error_logger:warning_report([{unhandled_cast, Request}]),
        {noreply, State}.


    -spec handle_info(Info :: timeout | term(), State :: state())
          -> {noreply, NewState :: state()}
           | {noreply, NewState :: state(), timeout()}
           | {noreply, NewState :: state(), hibernate}
           | {stop, Reason :: term(), NewState :: state()}.

    handle_info(Info, State) ->
        error_logger:warning_report([{unhandled_info, Info}]),
        {noreply, State}.


    -spec terminate(Reason :: normal | shutdown | {shutdown, term()} | term(), State :: state())
          -> ignore.

    terminate(_Reason, _State) ->
        ignore.


    -spec code_change(OldVsn :: term() | {down, term()}, State :: state(), Extra :: term())
          -> {ok, NewState :: state()}
           | {error, Reason :: term()}.

    code_change(_OldVsn, State, _Extra) ->
        {ok, State}.

    %% ====================================

snippet supervisor
options head
    -behaviour(supervisor).

    %% Supervisor callback
    -export([init/1]).

    -spec init(Args :: term())
          -> {ok, { { RestartStrategy :: one_for_one | one_for_all | rest_for_one | simple_one_for_one
                    , MaxR
                    , MaxT
                    }
                  , [ChildSpec]
                  }}
          | ignore.


    init([${1}]) ->
        {ok, {{RestartStrategy, MaxR, MaxT},
              [ChildId,
               {M, F, A},
               permanent | transient | temporary,
               brutal_kill | integer() | infinity,
               worker| supervisor,
               [M]
              ]}}.


snippet application
options head
    -behaviour(application).

    %% Application callbacks
    -export([start/2, stop/1]).

    start(_StartType, _StartArgs) ->
        {ok, Pid}.

    stop(State) ->
        ignored.


snippet module
options head
  -module(${0}).


snippet export
options head
  -export([${0}]).


snippet record
options head
    -record(${1}, {${2}}).


snippet include
options head
    -include("${1}.hrl").


snippet ioformat
options word
  io:format("${1}~p~n", [${2}]),


snippet case
    case ${1} of
        ${2}
    end,


snippet if
    if ${1} -> ${2};
       true -> ${3}
    end,


snippet fun
    fun(${1}) ->
    end,


snippet filter
    lists:filter(fun(${1}) ->
                 end, ),


snippet map
    lists:map(fun(${1}) ->
              end, ),

snippet filtermap
    lists:filtermap(fun(${1}) ->
                    end, ),

snippet foreach
    lists:foreach(fun(${1}) ->
                  end, ),


snippet foldl
    lists:foldl(fun(${1}) ->
                end, , ),


snippet foldr
    lists:foldr(fun(${1}) ->
                end, , ),
