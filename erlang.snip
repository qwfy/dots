snippet gen_server
options head
    -module(${1}).

    -behaviour(gen_server).

    -export([init/1, terminate/2, code_change/3,
             handle_call/3, handle_cast/2, handle_info/2]).

    init([]) ->
        {ok, some_state}.


    handle_call(Request, _From, State) ->
        error_logger:warning_report([{unhandled_call, Request}]),
        {noreply, State}.


    handle_cast(Request, State) ->
        error_logger:warning_report([{unhandled_cast, Request}]),
        {noreply, State}.


    handle_info(Info, State) ->
        error_logger:warning_report([{unhandled_info, Info}]),
        {noreply, State}.


    terminate(_Reason, _State) ->
        ignore.


    code_change(_OldVsn, State, _Extra) ->
        {ok, State}.


snippet supervisor
options head
    -module(${1}_sup).

    -behaviour(supervisor).

    -export([init/1]).

    -export([start_link/0]).

    start_link() ->
        supervisor:start_link({local, ?MODULE}, ?MODULE, []).

    init([]) ->
        SupFlags = #{strategy  => one_for_all | one_for_one | rest_for_one | simple_one_for_one,
                     intensity => integer() >= 0,
                     period    => integer() >= 1}, %% unit: second
        ChildSpecs = [#{id       => child_id(),
                        start    => mfargs(),
                        restart  => permanent | transient | temporary
                        shutdown => brutal_kill | timeout() %% unit: 1/1000 second
                        type     => worker | supervisor
                        modules  => modules()}],
        {ok, {SupFlags, ChildSpecs}}.


snippet application
options head
    -module(${1}_app).

    -behaviour(application).

    -export([start/2, stop/1]).

    start(_StartType, _StartArgs) ->
        {ok, SupPid} = ${2}_sup:start_link(),
        {ok, SupPid}.

    stop(_State) ->
        ignore.


snippet module
options head
  -module(${0}).


snippet export
options head
  -export([${0}]).


snippet record
options head
    -record(${1}, {${2}}).


snippet include
options head
    -include("${1}.hrl").


snippet ioformat
options word
  io:format("~p~n", []),


snippet case
    case ${1} of
        ${2}
    end,


snippet if
    if ${1} -> ${2};
       true -> ${3}
    end,


snippet fun
    fun(${1}) ->
    end,


snippet filter
    lists:filter(fun(${1}) ->
                 end, ),


snippet map
    lists:map(fun(${1}) ->
              end, ),

snippet filtermap
    lists:filtermap(fun(${1}) ->
                    end, ),

snippet foreach
    lists:foreach(fun(${1}) ->
                  end, ),


snippet foldl
    lists:foldl(fun(${1}) ->
                end, , ),


snippet foldr
    lists:foldr(fun(${1}) ->
                end, , ),
